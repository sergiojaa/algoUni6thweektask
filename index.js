//1.რიცხვების მასივის გათვალისწინებით, გამოიყენეთ ფილტრი ახალი მასივის შესაქმნელად, რომელიც შეიცავს მხოლოდ ლუწი რიცხვებს.

//2.მომხმარებლების გაფილტვრა ასაკის მიხედვით: მომხმარებლის ობიექტების მასივის გათვალისწინებით, თვისებების სახელით და ასაკის მიხედვით,
// გამოიყენეთ ფილტრი 18 წელზე უფროსი ასაკის მომხმარებელთა მასივის შესაქმნელად.

//3.სტრიქონების გაფილტვრა სიგრძის მიხედვით: სტრიქონების მასივის გათვალისწინებით, გამოიყენეთ ფილტრი მასივის შესაქმნელად, 
//რომელიც შეიცავს მხოლოდ 5 სიმბოლოზე მეტ სტრიქონებს.

//4.გააორმაგეთ რიცხვები: მოცემული რიცხვების მასივისთვის, შექმენით ახალი მასივი, სადაც თითოეული რიცხვი გაორმაგდება.

//5.მომხმარებლის ობიექტების მასივის გათვალისწინებით, შექმენით მასივი,სადაც მხოლოდ მომხმარებლის სახელებს დააბრუნებს.

//6.სტრიქონების მასივის გათვალისწინებით, შევქმნათ ახალი მასივი, სადაც თითოეული სტრიქონი გარდაიქმნება მაღალ რეგისტრში,ანუ დიდ ასოებად..

//7.იპოვეთ რიცხვების მასივში ყველა რიცხვის ჯამი.ვიყენებთ მაღალი დონის ფუნქციებს.

//8.გვაქვს მასივი,სადაც ყრია ადამიანის სახელები,ჩვენი მიზანია შევქმნათ ობიექტი, რომელშიც მითითებული იქნება თუ რამდენჯერ მეორდება
// მასივში თითოეული სახელი. მაგალითად: \{ "გიო": 2, "საბა": 5, "ნიკა": 3 \}

//9.რიცხვების მასივის გათვალისწინებით,დავალაგოთ მასივი ზრდადობით.

//10.რიცხვების მასივის გათვალისწინებით,დავალაგოთ მასივი კლებადობით.

//11.მომხმარებლების დალაგება სახელების მიხედვით: მომხმარებლის ობიექტების მასივის გათვალისწინებით,დავაბრუნოთ მასივი რომელიც დალაგებული იქნება
// ანბანურად მომხმარებლის სახელის მიხედვით.

//12.სტრიქონების მასივის გათვალისწინებით, დავაბრუნოთ მასივი,რომელშიც იქნება ელემენტები ზრდადობით,სტრიქონების სიგრძის  მიხედვით.

//13.მასივის გათვალისწინებით, გამოიყენეთ forEach თითოეული ელემენტის კონსოლში დასაპრინტად.

//14.რიცხვების მასივის გათვალისწინებით, გამოიყენეთ forEach რიცხვების  ჯამის გამოსათვლელად.

//15.რიცხვების მასივის გათვალისწინებით, გამოიყენეთ every, რათა შეამოწმოთ არის თუ არა ყველა რიცხვი დადებითი.
//რიცხვების მასივის გათვალისწინებით, გამოიყენეთ some, რათა შეამოწმოთ არის თუ არა ზოგიერთი  რიცხვი დადებითი.

//16.იურიდიული ასაკის ყველა მომხმარებელი: მომხმარებლის ობიექტების სიმრავლის გათვალისწინებით,  შეამოწმეთ, არის თუ არა ყველა მომხმარებელი
// 18 წლის ან უფროსი ასაკის.

//17.სტრიქონების მასივის გათვალისწინებით, შეამოწმეთ,არის თუ არა ყველა სტრიქონი ცარიელი.

//18.ზოგიერთი რიცხვი კენტია: რიცხვების მასივის გათვალისწინებით,  შეამოწმეთ არის თუ არა კენტი რიცხვები.

//19.ზოგიერთი მომხმარებელი ასაკობრივ ზღვარს ქვემოთ: მომხმარებლის ობიექტების სიმრავლის გათვალისწინებით, გამოიყენეთ some, 
//რომ შეამოწმოთ არის თუ არა 18 წლამდე ასაკის მომხმარებლები.

//20.დაწერეთ ფუნქცია სახელწოდებით capitalizeWords, რომელიც იღებს წინადადებას (სტრიქონს) არგუმენტად და აბრუნებს ახალ წინადადებას,
// სადაც თითოეული სიტყვის პირველი ასო დიდია.

//21.დაწერეთ ფუნქცია, რომელიც მიიღებს ობიექტების მასივს და თვისების სახელს და აბრუნებს ამ თვისების უნიკალური მნიშვნელობების მასივს ყველა ობიექტიდან.

//22.დაწერეთ ფუნქცია, რომელიც იღებს სტრიქონს შეყვანად და აბრუნებს ჭეშმარიტს, თუ ის არის პანგრამა (შეიცავს ანბანის ყველა ასოს ერთხელ მაინც),
// ცრუ სხვა შემთხვევაში.

//23.დაწერეთ ფუნქცია, რომელიც მიიღებს წინადადებას შეყვანად და აბრუნებს უნიკალური სიტყვების მასივს ანბანური თანმიმდევრობით,
// გამოკლებით გავრცელებული ინგლისური სიტყვების, როგორიცაა "the", "a" და "is".

//24.დაწერეთ პროგრამა, რომ ამოიღოთ ყველა ცრუ მნიშვნელობა მასივიდან.

//25.დაწერეთ პროგრამა წინადადებაში სიტყვების თანმიმდევრობის შესაბრუნებლად

